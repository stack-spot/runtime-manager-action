name: 'Runtime Manager Action'

description: 'Runtime Manager Action'

inputs:
  CLIENT_ID:
    description: Account client id
    required: true
  CLIENT_KEY:
    description: Account client secret key
    required: true
  CLIENT_REALM:
    description: Account client realm
    required: true
  WORKSPACE:
    description: Workspace used to deploy
    required: true
  ENVIRONMENT:
    description: Environment used to deploy
    required: true
  VERSION_TAG:
    description: Deploy version tag
    required: true
  SKIP_DEPLOY:
    description: Allows for deploys to be skiiped if the manifesto has not changed.
    required: false
    default: False
  BRANCH:
    description: Branch to perform checkout in Runtime
    required: false
    type: string
    default: 'true'
  OPEN_API_PATH:
    description: Path to API file to publish on StackSpot Catalog API
    required: false
  TF_STATE_BUCKET_NAME:
    description: Bucket to save generated tfstate files
    required: true
  TF_STATE_REGION:
    description: Region configuration for tfstate
    required: true
  IAC_BUCKET_NAME:
    description: Bucket to save generated iac files
    required: true
  IAC_REGION:
    description: Region configuration for iac
    required: true
  VERBOSE:
    description: Verbose configuration
    required: false
  DYNAMIC_INPUTS:
    description: --key1 value1 --key2 value2
    required: false
    default: ""
  WORKDIR:
    description: Path to the directory where the .stk is located.
    required: false
    default: "./"
  BETA_CLI_ENVIRONMENT:
    description: Environment in which cli will be executed. (default, stg, dev).
    required: false
    type: string
    default: default

outputs:
  tasks:
    description: "RUN TASK LIST"
    value: ${{ steps.deploy.outputs.tasks }}
  run_id:
    description: "RUN ID"
    value: ${{ steps.deploy.outputs.run_id }}

runs:
  using: "composite"
  steps:
    - name: Check Runner
      run: echo ðŸ¤– OS runner is $(uname)
      shell: bash
      
    - name: check envs
      run: |
        echo "${{ inputs.TF_STATE_BUCKET_NAME }}"
        echo "${{ inputs.IAC_REGION }}"
      shell: bash

    - name: Get os version
      run: |
        cat /etc/os-release
        uname -r
      shell: bash

    - name: Check glibc version
      run: |
        ldd --version
      shell: bash

    - name: Checkout
      if: inputs.BRANCH != 'false'
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4.7.1
      with:
        python-version: '3.10'

    - name: Install python libraries 
      run: pip install requests ruamel-yaml==0.17.33
      shell: bash

    - name: Setup STK CLI
      if: inputs.BETA_CLI_ENVIRONMENT == 'default'
      run: |
        curl -fsSL https://stk.stackspot.com/install.sh | bash
        $HOME/.stk/bin/stk login --client-id=${{ inputs.CLIENT_ID }} --client-key=${{ inputs.CLIENT_KEY }} --realm=${{ inputs.CLIENT_REALM }}
      shell: bash

    - name: Setup STK CLI STG
      if: inputs.BETA_CLI_ENVIRONMENT == 'stg'
      run: |
        curl -fsSL https://stk-cli.stg.stackspot.com/install-stg.sh | bash
        $HOME/.stk-stg/bin/stk-stg login --client-id=${{ inputs.CLIENT_ID }} --client-key=${{ inputs.CLIENT_KEY }} --realm=${{ inputs.CLIENT_REALM }}
      shell: bash

    - name: Setup STK CLI DEV
      if: inputs.BETA_CLI_ENVIRONMENT == 'dev'
      run: |
        curl -fsSL https://stk-cli.dev.stackspot.com/install-dev.sh | bash
        $HOME/.stk-dev/bin/stk-dev login --client-id=${{ inputs.CLIENT_ID }} --client-key=${{ inputs.CLIENT_KEY }} --realm=${{ inputs.CLIENT_REALM }}
      shell: bash

    - name: Generate manifesto
      working-directory: ${{ inputs.WORKDIR }}
      env:
        LANG: C.UTF-8
        LANGUAGE: C.UTF-8
        LC_ALL: C.UTF-8
        PYTHONIOENCODING: utf-8
      run: |
        if [ "${{ inputs.BETA_CLI_ENVIRONMENT }}" == "default" ]; then
          CLI="$HOME/.stk/bin/stk"
        
        elif [ "${{ inputs.BETA_CLI_ENVIRONMENT }}" == "stg" ]; then
          CLI="$HOME/.stk-stg/bin/stk-stg"
        
        elif [ "${{ inputs.BETA_CLI_ENVIRONMENT }}" == "dev" ]; then
          CLI="$HOME/.stk-dev/bin/stk-dev"
        
        else
          echo "Invalid environment: ${{ inputs.BETA_CLI_ENVIRONMENT }}"
          exit 1
        fi

        $CLI use workspace ${{ inputs.WORKSPACE }}
        
        FLAGS=$(echo "--env ${{ inputs.ENVIRONMENT }} --target ${{ github.action_path }} --version ${{ inputs.VERSION_TAG }}")
        
        if [ ! -z "${{ inputs.BRANCH }}" ]; then
          FLAGS=$(echo "$FLAGS --branch ${{ inputs.BRANCH }}")
        fi
        
        if [ ! -z "${{ inputs.OPEN_API_PATH }}" ]; then
          FLAGS=$(echo "$FLAGS --open-api-path ${{ inputs.OPEN_API_PATH }}")
        fi

        if [ ! -z "${{ inputs.DYNAMIC_INPUTS }}" ]; then
          FLAGS=$(echo "$FLAGS ${{ inputs.DYNAMIC_INPUTS }}")
        fi
        
        if [ ! -z "${{ inputs.VERBOSE }}" ]; then
          echo "DEPLOY PLAN FLAGS = $FLAGS"
        fi
        
        $CLI deploy plan $FLAGS
      shell: bash

    - name: Define Domains
      id: stackspot-url
      run: |
        if [ "${{ inputs.BETA_CLI_ENVIRONMENT }}" == "default" ]; then
          STACKSPOT_IAM_URL="https://auth.stackspot.com"
          STACKSPOT_RUNTIME_MANAGER_URL="https://runtime-manager.stackspot.com"
        
        elif [ "${{ inputs.BETA_CLI_ENVIRONMENT }}" == "stg" ]; then
          STACKSPOT_IAM_URL="https://iam-auth-ssr.stg.stackspot.com"
          STACKSPOT_RUNTIME_MANAGER_URL="https://runtime-manager.stg.stackspot.com"
        
        elif [ "${{ inputs.BETA_CLI_ENVIRONMENT }}" == "dev" ]; then
          STACKSPOT_IAM_URL="https://iam-auth-ssr.dev.stackspot.com"
          STACKSPOT_RUNTIME_MANAGER_URL="https://runtime-manager.dev.stackspot.com"
        
        else
          echo "Invalid environment: ${{ inputs.BETA_CLI_ENVIRONMENT }}"
          exit 1
        fi

        echo "iam=$STACKSPOT_IAM_URL" >> "$GITHUB_OUTPUT"
        echo "runtime_manager=$STACKSPOT_RUNTIME_MANAGER_URL" >> "$GITHUB_OUTPUT"
      shell: bash

    - name: Start Self Hosted DEPLOY run with Runtime
      id: deploy
      working-directory: ${{ inputs.WORKDIR }}
      env:
        STACKSPOT_IAM_URL: ${{ steps.stackspot-url.outputs.iam }}
        STACKSPOT_RUNTIME_MANAGER_URL: ${{ steps.stackspot-url.outputs.runtime_manager }}
        ACTION_PATH: ${{ github.action_path }}
        CLIENT_ID: ${{ inputs.CLIENT_ID }}
        CLIENT_KEY: ${{ inputs.CLIENT_KEY }}
        CLIENT_REALM: ${{ inputs.CLIENT_REALM }}
        TF_STATE_BUCKET_NAME: ${{ inputs.TF_STATE_BUCKET_NAME }}
        TF_STATE_REGION: ${{ inputs.TF_STATE_REGION }}
        IAC_BUCKET_NAME: ${{ inputs.IAC_BUCKET_NAME }}
        IAC_REGION: ${{ inputs.IAC_REGION }}
        VERBOSE: ${{ inputs.VERBOSE }}
        SKIP_DEPLOY: ${{ inputs.SKIP_DEPLOY }}
      run: |
        if [ ${{runner.os}} != 'Windows' ]; then
          python3 ${{ github.action_path }}/runtime.py
        elif [ ${{runner.os}} == 'Windows' ]; then
          python ${{ github.action_path }}\runtime.py
        else
          echo "${{runner.os}} not supported"
          exit 1
        fi
      shell: bash

branding:
    icon: 'terminal'
    color: 'gray-dark'

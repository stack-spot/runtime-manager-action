name: 'Runtime Manager Action'

description: 'Runtime Manager Action'

inputs:
  CLIENT_ID:
    description: Account client id
    required: true
  CLIENT_KEY:
    description: Account client secret key
    required: true
  CLIENT_REALM:
    description: Account client realm
    required: true
  WORKSPACE:
    description: Workspace used to deploy
    required: true
  ENVIRONMENT:
    description: Environment used to deploy
    required: true
  VERSION_TAG:
    description: Deploy version tag
    required: true
  BRANCH:
    description: Branch to perform checkout in Runtime
    required: false
  OPEN_API_PATH:
    description: Path to API file to publish on StackSpot Catalog API
    required: false
  TF_STATE_BUCKET_NAME:
    description: Bucket to save generated tfstate files
    required: true
  TF_STATE_REGION:
    description: Region configuration for tfstate
    required: true
  IAC_BUCKET_NAME:
    description: Bucket to save generated iac files
    required: true
  IAC_REGION:
    description: Region configuration for iac
    required: true
  VERBOSE:
    description: Verbose configuration
    required: false

outputs:
  tasks:
    description: "RUN TASK LIST"
    value: ${{ steps.deploy.outputs.tasks }}

runs:
  using: "composite"
  steps:
    - name: Check Runner
      run: echo ðŸ¤– OS runner is $(uname)
      shell: bash

    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4.7.0
      with:
        python-version: '3.10' 
        cache: 'pip' # caching pip dependencies
    
    - name: Install python libraries 
      run: |
        if [ ${{runner.os}} != 'Windows' ]; then
          pip install -r ${{ github.action_path }}/requirements.txt
        elif [ ${{runner.os}} == 'Windows' ]; then
          pip install -r '${{ github.action_path }}\requirements.txt'
        else
          echo "${{runner.os}} not supported"
          exit 1
        fi
      shell: bash
    
    - name: Setup STK CLI
      uses: stack-spot/stk-cli-action@v1.1
      with:
        client_id: ${{ inputs.CLIENT_ID }}
        client_key: ${{ inputs.CLIENT_KEY }}
        realm: ${{ inputs.CLIENT_REALM }}

    - name: Generate manifesto
      run: |
        stk use workspace ${{ inputs.WORKSPACE }}
        
        FLAGS=$(echo "--env ${{ inputs.ENVIRONMENT }} --target ${{ github.action_path }} --version ${{ inputs.VERSION_TAG }}")
        
        if [ ! -z "${{ inputs.BRANCH }}" ]; then
          FLAGS=$(echo "$FLAGS --branch ${{ inputs.BRANCH }}")
        fi
        
        if [ ! -z "${{ inputs.OPEN_API_PATH }}" ]; then
          FLAGS=$(echo "$FLAGS --open-api-path ${{ inputs.OPEN_API_PATH }}")
        fi
        
        if [ ! -z "${{ inputs.VERBOSE }}" ]; then
          echo "STK DEPLOY PLAN FLAGS = $FLAGS"
        fi

        # stk deploy plan $FLAGS
      shell: bash

    - name: Start Self Hosted DEPLOY run with Runtime
      id: deploy
      env:
        ACTION_PATH: ${{ github.action_path }}
        CLIENT_ID: ${{ inputs.CLIENT_ID }}
        CLIENT_KEY: ${{ inputs.CLIENT_KEY }}
        CLIENT_REALM: ${{ inputs.CLIENT_REALM }}
        TF_STATE_BUCKET_NAME: ${{ inputs.TF_STATE_BUCKET_NAME }}
        TF_STATE_REGION: ${{ inputs.TF_STATE_REGION }}
        IAC_BUCKET_NAME: ${{ inputs.IAC_BUCKET_NAME }}
        IAC_REGION: ${{ inputs.IAC_REGION }}
        VERBOSE: ${{ inputs.VERBOSE }}
      run: python runtime.py
      shell: bash

branding:
    icon: 'terminal'
    color: 'gray-dark'